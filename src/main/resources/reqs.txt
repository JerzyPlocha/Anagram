1.2 Kolekcje
Zadanie 1.4.


4.1 WORD TEMPLATE -> LIST MATCHING;

• napisz program (dla milośników krzyżówek), który czyta z klawiatury pewien wzór słowa i wyszukuje z listy wszystkie słowa pasujące
 do tego wzoru. Wzorem jest słowo w którym każda litera oznacza sama siebie, a znak kropki oznacza "dowolna litera";

    -> wzor slowa -> wyswietla pasujace.



4.2 WORD -> LIST MATCHING ANAGRAMS;

• napisz program, który wypisuje występujące na liście anagramy słowa podanego przez użytkownika z klawiatury;

    -> slowo -> zbior anagramow -> filtruj.



4.3 FILE -> ALL ANAGRAM OF EVERY WORD FROM LIST ORDER BY HOW MANY;

• napisz program, który wypisuje anagramy słów z listy w kolejności ilości anagramów; na przykład jedna linia wydruku
 mogłaby by mieć postać

    -> lista anagramow, uporzadkowana po ilosci i po slowie, jezeli anagramow co najmniej 3.

        2: [dog god]




Oczywiście każde słowo może pojawić się tylko w jednej takiej linii.
Wydruk powinien uwzgladniać tylko przypadki, kiedy liczba anagramów wynosi co najmniej trzy (w przeciwnym przypadku byłby zbyt długi).

Użyj odpowiednich kolekcji (na przykład:

    Map<String,MyClass> lub podobnych

    (MyClass mogłoby na przykład zawierać listę i implementować Comparable).



[Anagram to słowo powstające z danego przez permutację liter.]
